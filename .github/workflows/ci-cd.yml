# CI/CD Pipeline for the Pahana Edu Billing System
name: CI/CD Pipeline for Pahana Edu

on:
  # Triggers on Pull Requests to key branches
  pull_request:
    branches:
      - stage
      - release
      - main
  # Triggers on direct pushes to key branches
  push:
    branches:
      - dev
      - stage
      - release
      - main

jobs:
  #========================================
  # 1. MERGE VALIDATION JOBS
  #========================================
  merge-validation:
    runs-on: ubuntu-latest
    # This single job runs for all relevant pull requests and checks the source branch
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - name: Validate Branch Flow
        run: |
          if [[ "${{ github.base_ref }}" == "main" && "${{ github.head_ref }}" != "release" ]]; then
            echo "Error: Pull requests to 'main' must come from the 'release' branch."
            exit 1
          elif [[ "${{ github.base_ref }}" == "release" && "${{ github.head_ref }}" != "stage" ]]; then
            echo "Error: Pull requests to 'release' must come from the 'stage' branch."
            exit 1
          elif [[ "${{ github.base_ref }}" == "stage" && "${{ github.head_ref }}" != "dev" ]]; then
            echo "Error: Pull requests to 'stage' must come from the 'dev' branch."
            exit 1
          fi
          echo "Branch flow validation successful."

  #========================================
  # 2. TEST JOB
  #========================================
  run-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # This job runs on every push or pull request to the specified branches
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.TEST_DB_NAME }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Initialize Test Database Schema
        run: |
          echo "Waiting for MySQL service..."
          until mysql -h 127.0.0.1 -P 3306 -u ${{ secrets.TEST_DB_USER }} -p${{ secrets.TEST_DB_PASSWORD }} -e "SELECT 1"; do
            sleep 2
          done
          echo "MySQL is ready. Initializing schema..."
          mysql -h 127.0.0.1 -P 3306 -u ${{ secrets.TEST_DB_USER }} -p${{ secrets.TEST_DB_PASSWORD }} ${{ secrets.TEST_DB_NAME }} < src/test/resources/schema.sql

      - name: Run All JUnit Tests
        run: mvn test
        env:
          # Pass database credentials to the test environment
          TEST_DB_URL: jdbc:mysql://127.0.0.1:3306/${{ secrets.TEST_DB_NAME }}
          TEST_DB_USER: ${{ secrets.TEST_DB_USER }}
          TEST_DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}

      - name: Upload Test Reports
        if: always() # This step runs even if tests fail, to capture the failure reports
        uses: actions/upload-artifact@v4
        with:
          name: surefire-test-reports
          path: target/surefire-reports/
          retention-days: 7

  #========================================
  # 3. BUILD JOB
  #========================================
  build:
    runs-on: ubuntu-latest
    needs: run-tests # This job will only start if the 'run-tests' job succeeds
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests # Skip tests since they've already been run

      - name: Archive Build Artifact (.war file)
        uses: actions/upload-artifact@v4
        with:
          name: pahana-edu-package
          path: target/*.war
          retention-days: 7

  #========================================
  # 4. DEPLOYMENT JOBS
  #========================================
  deploy-to-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    environment: development
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: pahana-edu-package
      - name: Deploy to Development
        run: |
          echo "Deploying to DEVELOPMENT environment from dev branch..."
          # Your actual deployment script would go here. For example:
          # scp *.war user@dev-server.com:/path/to/tomcat/webapps/

  deploy-to-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/stage'
    environment: staging
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: pahana-edu-package
      - name: Deploy to Staging
        run: |
          echo "Deploying to STAGING environment from stage branch..."
          # Your actual deployment script would go here.

  deploy-to-preprod:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/release'
    environment: preprod
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: pahana-edu-package
      - name: Deploy to Pre-Production
        run: |
          echo "Deploying to PRE-PRODUCTION environment from release branch..."
          # Your actual deployment script would go here.

  deploy-to-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: pahana-edu-package
      - name: Deploy to Production
        run: |
          echo "Deploying to PRODUCTION environment from main branch..."
          # Your actual deployment script would go here.